name: Synchronize Fast Forward Pull Request

on:
  workflow_dispatch:
  push:
    branches:
      - lab
      - dev
      - test
  workflow_call:
    inputs:
      app_id:
        required: true
        type: string
    secrets:
      private_key:
        required: true

# This workflow requires these permissions in the caller workflow.
# permissions:
#   contents: read
#   pull-requests: write
#   repository-projects: read # https://github.com/cli/cli/discussions/5307

jobs:
  synchronize-fast-forward-pull-request:
    name: Synchronize Fast Forward Pull Request
    runs-on: ubuntu-latest
    steps:
      - name: Get App Token
        uses: actions/create-github-app-token@5d869da34e18e7287c1daad50e0b8ea0f506ce69 # v1.11.0
        id: get-app-token
        with:
          app-id: ${{ inputs.app_id }}
          private-key: ${{ secrets.private_key }}

      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0

      - name: Get target branch
        id: get-target-branch
        env:
          CURRENT_BRANCH: ${{ github.ref_name }}
        run: |
          if [[ "$CURRENT_BRANCH" == "main" ]]; then
            echo "target_branch=lab" >> "$GITHUB_OUTPUT"
          elif [[ "$CURRENT_BRANCH" == "lab" ]]; then
            echo "target_branch=dev" >> "$GITHUB_OUTPUT"
          elif [[ "$CURRENT_BRANCH" == "dev" ]]; then
            echo "target_branch=test" >> "$GITHUB_OUTPUT"
          elif [[ "$CURRENT_BRANCH" == "test" ]]; then
            echo "target_branch=prod" >> "$GITHUB_OUTPUT"
          else
            echo "Error: Current branch \`${CURRENT_BRANCH}\` is not supported." >&2
            exit 1
          fi

      - name: Get last commit date
        id: date
        run: echo "last_commit_date=$(date -d @$(git log -1 --format="%ct") +'%Y%m%d')" >> "$GITHUB_OUTPUT"

      - name: Generate PR title
        id: generate-pr-title
        env:
          GITHUB_TOKEN: ${{ steps.get-app-token.outputs.token }}
          LAST_COMMIT_DATE: ${{ steps.date.outputs.last_commit_date }}
          TARGET_BRANCH: ${{ steps.get-target-branch.outputs.target_branch }}
          CURRENT_BRANCH: ${{ github.ref_name }}
        run: |
          set -x
          SEARCH_PR_TITLE="Fast-forward version $LAST_COMMIT_DATE"
          if [[ "$CURRENT_BRANCH" == 'main' ]]; then
            COUNT=$(gh pr list --search "$SEARCH_PR_TITLE in:title" --state merged --base $TARGET_BRANCH | wc -l)
            ((COUNT+=1))
            PR_TITLE="Fast-forward \`$TARGET_BRANCH\` to version \`$LAST_COMMIT_DATE-$COUNT\` ðŸš€"
          else
            LAST_PR_TITLE=$(gh pr list --search "$SEARCH_PR_TITLE in:title" --state merged --base $CURRENT_BRANCH \
              --json title -q ".[0].title")
            PR_TITLE=$(echo "$LAST_PR_TITLE" | sed "s/$CURRENT_BRANCH/$TARGET_BRANCH/")
          fi
          echo "pr_title=$PR_TITLE" >> "$GITHUB_OUTPUT"

      - name: Fetch Changes
        env:
          TARGET_BRANCH: ${{ steps.get-target-branch.outputs.target_branch }}
        run: git fetch origin $TARGET_BRANCH:$TARGET_BRANCH

      - name: Generate changelog
        env:
          TARGET_BRANCH: ${{ steps.get-target-branch.outputs.target_branch }}
          CURRENT_BRANCH: ${{ github.ref_name }}
        run: |
          echo "ðŸ¤– Auto-generated PR to merge changes from \`$CURRENT_BRANCH\` to \`$TARGET_BRANCH\`.

          ### Changes" > changelog.md

          PRS_AND_ISSUES=$(git log --oneline $TARGET_BRANCH..$CURRENT_BRANCH | grep -Eo '#[0-9]+' | sort | uniq -u)
          if [[ -n "$PRS_AND_ISSUES" ]]; then
            echo '**PRs / Issues:**' >> changelog.md
            echo "$PRS_AND_ISSUES" | sed 's/^/- /' >> changelog.md
            echo >> changelog.md
          fi
          COMMITS=$(git log --oneline --no-merges --first-parent $TARGET_BRANCH..$CURRENT_BRANCH)
          if [[ -n "$COMMITS" ]]; then
            echo '**Commits:**' >> changelog.md
            echo "$COMMITS" | sed 's/^/- /' >> changelog.md
          fi

      - name: Check if PR already exists
        id: check-pr
        env:
          GITHUB_TOKEN: ${{ steps.get-app-token.outputs.token }}
          CURRENT_BRANCH: ${{ github.ref_name }}
          TARGET_BRANCH: ${{ steps.get-target-branch.outputs.target_branch }}
        run: |
          set -x
          PR_EXISTING=$(gh pr list --base $TARGET_BRANCH --head $CURRENT_BRANCH --json number --jq ".[0].number")
          echo "PR_EXISTING=$PR_EXISTING" >> "$GITHUB_OUTPUT"

      - name: Update or Create PR
        env:
          GITHUB_TOKEN: ${{ steps.get-app-token.outputs.token }}
          TARGET_BRANCH: ${{ steps.get-target-branch.outputs.target_branch }}
          CURRENT_BRANCH: ${{ github.ref_name }}
          PR_EXISTING: ${{ steps.check-pr.outputs.PR_EXISTING }}
          PR_TITLE: ${{ steps.generate-pr-title.outputs.pr_title }}
        run: |
          set -x
          if [[ -n "$PR_EXISTING" ]]; then
            # Update the existing PR's body with the new changelog
            gh pr edit $PR_EXISTING \
              --title "$PR_TITLE" \
              --body-file changelog.md
          else
            gh pr create \
              --head $CURRENT_BRANCH \
              --base $TARGET_BRANCH \
              --title "$PR_TITLE" \
              --body-file changelog.md \
              --label fast-forward
          fi
